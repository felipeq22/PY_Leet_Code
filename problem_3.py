# -*- coding: utf-8 -*-
"""problem_3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1niigchSE9_Nw_r_-4-BytqRvT6c59A0S
"""

# Leet Code Problem 3.

'''
Given a string s, find the length of the longest substring
without repeating characters.

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
'''

def lengthOfLongestSubstring(s:str) -> int:

    substring = ''
    max_substring = ''
    max_length = 0
    last_len = 0
    counter = 0
    counter_ini = 0

    while counter < len(s):

      print('substring: ' + str(substring))
      print('letter: ' +str(s[counter]))

      letter = s[counter]

      #First Conditional
      if letter not in substring:

        substring += letter
        last_len = len(substring)
        counter += 1

      else:

        last_substring = substring
        substring = ''
        counter_ini += 1
        counter = counter_ini

      #Second Conditional
      if last_len > max_length:

        max_length = last_len

    print('last_substring: ' + str(last_substring))

    return max_length

print(lengthOfLongestSubstring2('pwwkew'))



len('c')

len(s)

